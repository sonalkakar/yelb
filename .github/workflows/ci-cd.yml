name: Deploy Local Docker Host
on:
  workflow_dispatch:

jobs:
  #linter:
    #runs-on: self-hosted 
    #steps:
    #- name: Scan the Docker Files with Liner
    #  run: sudo hadolint ./yelb-ui/Dockerfile 
    
  deploy:
    runs-on: self-hosted # Ensure this job runs on your self-hosted runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      #

    #- name: Navigate to Docker Compose Directory
      #run: cd /path/to/your/docker-compose/directory # Replace with the actual path

    - name: Stop Existing Containers (if any)
      run: docker-compose down

    - name: Pull Latest Images
      run: docker-compose pull

    #- name: Install Docker Scout CLI
#      run: |
 #         curl -sSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh
  #        sudo mv ~/.docker/cli-plugins/docker-scout /usr/local/bin/

      
   # - name: Scan Application UI
    #  run:  sudo docker-scout cves mreferre/yelb-ui:0.10  # Replace with your actual image name and tag
      
    #- name: Scan Application App Server
    #  run: sudo docker-scout cves mreferre/yelb-appserver:0.7  # Replace with your actual image name and tag
      
    #- name: Scan Redis 
    #  run: sudo docker-scout cves redis:4.0.2 # Replace with your actual image name and tag
      
    #- name: Scan Database
    #  run: sudo docker-scout cves mreferre/yelb-db:0.6  # Replace with your actual image name and tag
    # store the reports in jfrog
    - name: Upload Vulnerability Report via REST API
       run:|
            mkdir -p vulreport
            sudo docker scout cves --format json redis:4.0.2 > vulreport/redis-scan-report.json
            sudo docker scout cves --format json mreferre/yelb-ui:0.10 > vulreport/ui-scan-report.json
            sudo docker scout cves --format json mreferre/yelb-appserver:0.7 > vulreport/appserver-scan-report.json

            echo "REPORT_PATH=    $(pwd)/vulreport/redis-scan-report.json" >> $GITHUB_OUTPUT
            echo "REPORT_PATH_UI= $(pwd)/vulreport/ui-scan-report.json" >> $GITHUB_OUTPUT 
            echo "REPORT_PATH_APP=$(pwd)/vulreport/appserver-scan-report.json" >> $GITHUB_OUTPUT 
            curl -H "X-JFrog-Art-Api:${{ secrets.YOUR_JFROG_TOKEN_SECRET }}" -X PUT \
            "${{ secrets.JFROG_URL }}/artifactory/${{ secrets.JFROG_REPORT_REPO }}/${{ secrets.JFROG_REPORT_PATH }}/redis-${{ github.run_id }}-vulnerability-report.json" \
            -T "vulreport/redis-scan-report.json" 

            curl -H "X-JFrog-Art-Api:${{ secrets.YOUR_JFROG_TOKEN_SECRET }}" -X PUT \
            "${{ secrets.JFROG_URL }}/artifactory/${{ secrets.JFROG_REPORT_REPO }}/${{ secrets.JFROG_REPORT_PATH }}/ui-${{ github.run_id }}-vulnerability-report.json" \
            -T "vulreport/ui-scan-report.json" 

            curl -H "X-JFrog-Art-Api:${{ secrets.YOUR_JFROG_TOKEN_SECRET }}" -X PUT \
            "${{ secrets.JFROG_URL }}/artifactory/${{ secrets.JFROG_REPORT_REPO }}/${{ secrets.JFROG_REPORT_PATH }}/appserver-${{ github.run_id }}-vulnerability-report.json" \
            -T "vulreport/appserver-scan-report.json"

    - name: Start Containers
      run: docker-compose up -d

    - name: Deployment successful
      run: echo "Application deployed successfully on the local Docker host!"
      #
